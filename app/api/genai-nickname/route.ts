import { NextResponse } from "next/server";

// Keep nickname short and UI-safe
function sanitizeNickname(raw: string): string {
  const cleaned = raw
    .replace(/\r|\n/g, " ")
    .replace(/[^A-Za-z0-9 _-]/g, "")
    .trim()
    .replace(/\s+/g, " ");
  return cleaned.slice(0, 28);
}

// The randomGuest function is no longer needed, as you want to always use gen-AI nicknames.
// This function is removed to ensure all nicknames are generated by the AI model.

export async function GET() {
  const apiKey = process.env.GROQ_API_KEY;
  if (!apiKey) {
    return NextResponse.json(
      { error: "GROQ_API_KEY not configured" },
      { status: 503 }
    );
  }

  try {
    const model = process.env.GROQ_MODEL || "llama-3.1-8b-instant";
    for (let attempt = 1; attempt <= 3; attempt++) {
      const resp = await fetch(
        "https://api.groq.com/openai/v1/chat/completions",
        {
          method: "POST",
          headers: {
            Authorization: `Bearer ${apiKey}`,
            "Content-Type": "application/json",
            Accept: "application/json",
          },
          body: JSON.stringify({
            model,
            messages: [
              {
                role: "system",
                content:
                  "Return ONLY a short nickname (2 words max), Title Case, ASCII. Be random as possible. Be creative.",
              },
              {
                role: "user",
                content:
                  "One fun random nickname for a cursor label. Output only the nickname. Be random as possible. Be creative.",
              },
            ],
            temperature: 0.95,
            max_tokens: 16,
            n: 1,
          }),
        }
      );

      if (!resp.ok) {
        await new Promise((r) => setTimeout(r, attempt * 400));
        continue;
      }

      const data = (await resp.json()) as any;
      const text = (
        data?.choices?.[0]?.message?.content ??
        data?.choices?.[0]?.text ??
        ""
      ).toString();
      const nickname = sanitizeNickname(text);
      if (nickname) return NextResponse.json({ nickname });
      await new Promise((r) => setTimeout(r, attempt * 400));
    }
    return NextResponse.json(
      { error: "Nickname generation failed" },
      { status: 502 }
    );
  } catch {
    return NextResponse.json(
      { error: "Nickname generation failed" },
      { status: 502 }
    );
  }
}
